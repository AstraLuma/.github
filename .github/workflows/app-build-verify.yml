name: Build App

#######
# Verify building an app for a target platform, format, and framework on a particular OS.
# If a platform and format are not specified, then an app is built for each platform and format supported on the OS.
#######

on:
  workflow_call:
    inputs:
      python-version:
        description: "Python version to use; defaults to latest Python release."
        default: "3.X"
        type: string
      runner-os:
        description: "The OS to use to build the App; must be a fully qualified GitHub runner OS, e.g. ubuntu-latest."
        required: true
        type: string
      framework:
        description: "Framework to use to build the App, e.g. toga."
        required: true
        type: string
      repository:
        description: "GitHub repository to checkout; defaults to repo running this workflow."
        default: ${{ github.repository }}
        type: string
      target-platform:
        description: "The target platform for the app, i.e. linux, macos, or windows. Leave blank all supported platforms."
        default: ""
        type: string
      target-format:
        description: "The target format for the app, e.g. appimage, xcode, app, etc. Leave blank all supported formats."
        default: ""
        type: string
      briefcase-template-source:
        description: "Path to use for --template for `briefcase new` to create app."
        default: ""
        type: string
      briefcase-template-branch:
        description: "Git branch to use for --template-branch for `briefcase new` to create app."
        default: ""
        type: string

defaults:
  run:
    shell: bash

env:
  FORCE_COLOR: "1"

jobs:
  verify-app:
    name: Verify App Build
    runs-on: ${{ inputs.runner-os }}
    steps:

    - name: Checkout ${{ inputs.repository }}
      uses: actions/checkout@v4.1.1
      with:
        repository: ${{ inputs.repository }}
        fetch-depth: 0

    - name: Checkout beeware/.github
      uses: actions/checkout@v4.1.1
      with:
        repository: rmartin16/.github-beeware  # !!!! TODO:PR: REPLACE ME WITH beeware/.github !!!!
        ref: create-new-project  # !!!! TODO:PR: REMOVE ME !!!!
        path: beeware-.github

    - name: Package Name
      id: package
      run: echo "name=$(basename '${{ inputs.repository }}')" >> ${GITHUB_OUTPUT}

    - name: Determine Cache Directories
      id: dirs
      run: |
        echo "cookiecutters-data-dir=~/.cookiecutters" >> ${GITHUB_OUTPUT}

        if [[ "${{ startsWith(inputs.runner-os, 'ubuntu') }}" == "true" ]]; then
          echo "briefcase-data-dir=~/.cache/briefcase" >> ${GITHUB_OUTPUT}
          echo "pip-cache-dir=~/.cache/pip" >> ${GITHUB_OUTPUT}

        elif [[ "${{ startsWith(inputs.runner-os, 'macos') }}" == "true" ]]; then
          echo "briefcase-data-dir=~/Library/Caches/org.beeware.briefcase" >> ${GITHUB_OUTPUT}
          echo "pip-cache-dir=~/Library/Caches/pip" >> ${GITHUB_OUTPUT}
          echo "docker-cache-dir=~/Library/Containers/com.docker.docker/Data/vms/0/" >> ${GITHUB_OUTPUT}

        elif [[ "${{ startsWith(inputs.runner-os, 'windows') }}" == "true" ]]; then
          echo "briefcase-data-dir=~/AppData/Local/BeeWare/briefcase/Cache" >> ${GITHUB_OUTPUT}
          echo "pip-cache-dir=~/AppData/Local/pip/Cache" >> ${GITHUB_OUTPUT}
          echo "docker-cache-dir=C:/ProgramData/DockerDesktop" >> ${GITHUB_OUTPUT}
        fi

    - name: Cache Briefcase Tools
      uses: actions/cache@v3.3.2
      with:
        key: briefcase-${{ runner.os }}-${{ inputs.repository }}-${{ inputs.framework }}-${{ inputs.target-platform }}-${{ inputs.target-format }}
        path: |
          ${{ steps.dirs.outputs.cookiecutters-data-dir }}
          ${{ steps.dirs.outputs.briefcase-data-dir }}
          ${{ steps.dirs.outputs.pip-cache-dir }}
          ${{ steps.dirs.outputs.docker-cache-dir }}

    - name: Determine System python3 Version
      id: system-python
      run: |
        SYSTEM_PYTHON_VER=$(python3 -c 'import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")')
        echo "version=${SYSTEM_PYTHON_VER}" | tee -a ${GITHUB_OUTPUT}

    - name: Set Up Python
      uses: actions/setup-python@v4.7.1
      with:
        python-version: ${{ inputs.python-version }}

    - name: Get Packages
      # Briefcase will build and package itself in a previous step in its CI
      if: endsWith(inputs.repository, 'briefcase')
      uses: actions/download-artifact@v3.0.2
      with:
        name: packages-${{ steps.package.outputs.name }}
        path: dist

    # !!!!!  TODO:PR: RESTORE INSTALLING BRIEFCASE ARTEFACT - INSTALL FROM PR BODY ALWAYS FOR TESTING !!!!!
    # - name: Install Briefcase Artefact
    #   if: endsWith(inputs.repository, 'briefcase')
    #   run: python -m pip install dist/briefcase-*.whl

    - name: Install Briefcase
      # if: ${{ !endsWith(inputs.repository, 'briefcase') }}
      uses: ./beeware-.github/.github/actions/install-briefcase

    - name: Create Briefcase Project
      id: create
      uses: ./beeware-.github/.github/actions/app-create
      with:
        framework: ${{ inputs.framework }}
        briefcase-template-source: ${{ inputs.briefcase-template-source }}
        briefcase-template-branch: ${{ inputs.briefcase-template-branch }}

    - name: Determine Output Format Configuration
      # only used for the template repos so apps are built with the PR version of the template;
      # other repos will fetch the latest template version during `create` as normal.
      if: endsWith(inputs.repository, '-template') && inputs.repository != 'beeware/briefcase-template'
      id: output-format
      run: |
        # The current repo is cloned in to the current directory; that will
        # be up levels up in the file system from the root of the app project
        echo "template-override=--config 'template=\"../../\"'" | tee -a ${GITHUB_OUTPUT}

    # In the steps below, using the builtin functions for comparison (instead of ==)
    # allows for case-insensitivity to the inputs for the workflow.

    - name: Build macOS App
      if: >
        startsWith(inputs.runner-os, 'macOS')
        && contains(fromJSON('["", "macOS"]'), inputs.target-platform)
        && contains(fromJSON('["", "app"]'), inputs.target-format)
      working-directory: ${{ steps.create.outputs.project-path }}
      run: |
        briefcase create macOS app ${{ steps.output-format.outputs.template-override }}
        briefcase build macOS app
        briefcase package macOS app --adhoc-sign

    - name: Build macOS Xcode Project
      if: >
        startsWith(inputs.runner-os, 'macOS')
        && contains(fromJSON('["", "macOS"]'), inputs.target-platform)
        && contains(fromJSON('["", "Xcode"]'), inputs.target-format)
      working-directory: ${{ steps.create.outputs.project-path }}
      run: |
        briefcase create macOS Xcode ${{ steps.output-format.outputs.template-override }}
        briefcase build macOS Xcode
        briefcase package macOS Xcode --adhoc-sign

    - name: Build Windows App
      if: >
        startsWith(inputs.runner-os, 'Windows')
        && contains(fromJSON('["", "Windows"]'), inputs.target-platform)
        && contains(fromJSON('["", "app"]'), inputs.target-format)
      env:
        WIX: ""  # force Briefcase to install and use its own version of WiX
      working-directory: ${{ steps.create.outputs.project-path }}
      run: |
        briefcase create windows app ${{ steps.output-format.outputs.template-override }}
        briefcase build windows app
        briefcase package windows app --adhoc-sign

    - name: Build Windows Visual Studio Project
      if: >
        startsWith(inputs.runner-os, 'Windows')
        && contains(fromJSON('["", "Windows"]'), inputs.target-platform)
        && contains(fromJSON('["", "VisualStudio"]'), inputs.target-format)
      env:
        WIX: ""  # force Briefcase to install and use its own version of WiX
      working-directory: ${{ steps.create.outputs.project-path }}
      run: |
        briefcase create windows VisualStudio ${{ steps.output-format.outputs.template-override }}
        briefcase build windows VisualStudio
        briefcase package windows VisualStudio --adhoc-sign

    - name: Build Linux System Project (Ubuntu, local)
      if: >
        startsWith(inputs.runner-os, 'ubuntu')
        && startsWith(inputs.python-version, steps.system-python.outputs.version)
        && contains(fromJSON('["", "Linux"]'), inputs.target-platform)
        && contains(fromJSON('["", "system"]'), inputs.target-format)
      working-directory: ${{ steps.create.outputs.project-path }}
      run: |
        sudo apt update -y
        sudo apt install -y --no-install-recommends python3-dev python3-pip libcairo2-dev libgirepository1.0-dev

        briefcase create linux system ${{ steps.output-format.outputs.template-override }}
        briefcase build linux system
        briefcase package linux system --adhoc-sign

    - name: Build Linux System Project (Debian, Dockerized)
      if: >
        startsWith(inputs.runner-os, 'ubuntu')
        && contains(fromJSON('["", "Linux"]'), inputs.target-platform)
        && contains(fromJSON('["", "system"]'), inputs.target-format)
      working-directory: ${{ steps.create.outputs.project-path }}
      run: |
        briefcase create linux system --target debian:bullseye ${{ steps.output-format.outputs.template-override }}
        briefcase build linux system --target debian:bullseye
        briefcase package linux system --target debian:bullseye --adhoc-sign

    - name: Build Linux System Project (RPM, Dockerized)
      if: >
        startsWith(inputs.runner-os, 'ubuntu')
        && contains(fromJSON('["", "Linux"]'), inputs.target-platform)
        && contains(fromJSON('["", "system"]'), inputs.target-format)
      working-directory: ${{ steps.create.outputs.project-path }}
      run: |
        briefcase create linux system --target fedora:37 ${{ steps.output-format.outputs.template-override }}
        briefcase build linux system --target fedora:37
        briefcase package linux system --target fedora:37 --adhoc-sign

    - name: Build Linux System Project (Arch, Dockerized)
      if: >
        startsWith(inputs.runner-os, 'ubuntu')
        && contains(fromJSON('["", "Linux"]'), inputs.target-platform)
        && contains(fromJSON('["", "system"]'), inputs.target-format)
      working-directory: ${{ steps.create.outputs.project-path }}
      run: |
        briefcase create linux system --target archlinux:latest ${{ steps.output-format.outputs.template-override }}
        briefcase build linux system --target archlinux:latest
        briefcase package linux system --target archlinux:latest --adhoc-sign

    # 2023-09-11 AppImage dropped to "best effort" support.
    #
    # AppImage builds are the slowest, because they're incompatible with binary wheels;
    # and installing Linux GUI toolkits (which are on a constant "install the latest"
    # push) is fundamentally incompatible with using an old base image. As of today,
    # it's impossible to install Toga on *any* manylinux image (
    # https://gitlab.gnome.org/GNOME/pygobject/-/issues/590); PySide2 can't be
    # installed on any *supported* manylinux image, and PySide6 only works on 2_28.
    # Even when the install *does* work, there are so many incompatibility and
    # binary dependency issues that it's just not worth the oxygen to keep this thing
    # alive.
    #
    # Only runs when target platform and format are explicitly Linux and AppImage.
    - name: Build AppImage Project
      if: >
        startsWith(inputs.runner-os, 'ubuntu')
        && contains(fromJSON('["Linux"]'), inputs.target-platform)
        && contains(fromJSON('["AppImage"]'), inputs.target-format)
      working-directory: ${{ steps.create.outputs.project-path }}
      run: |
        # PyGObject>=3.46.0 requires a version of glibc that isn't available in manylinux images;
        # so, the version will need to be constrained to successfully build an AppImage with Toga.
        # Furthermore, Toga>0.3.1 requires PyGObject>=3.46.0 so its version is constrained as well.
        if [ "${{ startsWith(inputs.framework, 'toga') }}" = "true" ]; then
          CONFIG_OVERRIDE_REQUIRES='requires=["toga-gtk==0.3.1", "PyGobject<3.46.0"]'
        fi

        briefcase create linux AppImage \
          ${{ steps.output-format.outputs.template-override }} \
          --config $(printf '%s' $CONFIG_OVERRIDE_REQUIRES)
        briefcase build linux AppImage
        briefcase package linux AppImage --adhoc-sign

    - name: Build Flatpak Project
      if: >
        startsWith(inputs.runner-os, 'ubuntu')
        && contains(fromJSON('["", "Linux"]'), inputs.target-platform)
        && contains(fromJSON('["", "Flatpak"]'), inputs.target-format)
        && contains(fromJSON('["Toga", "PyGame"]'), inputs.framework)
      working-directory: ${{ steps.create.outputs.project-path }}
      run: |
        sudo apt update -y
        sudo apt install -y --no-install-recommends flatpak flatpak-builder elfutils

        briefcase create linux flatpak ${{ steps.output-format.outputs.template-override }}
        briefcase build linux flatpak
        briefcase package linux flatpak --adhoc-sign

    - name: Build Android App
      if: >
        contains(fromJSON('["", "Android"]'), inputs.target-platform)
        && contains(fromJSON('["", "Gradle"]'), inputs.target-format)
        && startsWith(inputs.framework, 'toga')
      working-directory: ${{ steps.create.outputs.project-path }}
      run: |
        briefcase create android gradle ${{ steps.output-format.outputs.template-override }}
        briefcase build android gradle
        briefcase package android gradle --adhoc-sign

    - name: Build iOS App
      if: >
        startsWith(inputs.runner-os, 'macOS')
        && contains(fromJSON('["", "iOS"]'), inputs.target-platform)
        && contains(fromJSON('["", "Xcode"]'), inputs.target-format)
        && startsWith(inputs.framework, 'toga')
      working-directory: ${{ steps.create.outputs.project-path }}
      run: |
        briefcase create iOS xcode ${{ steps.output-format.outputs.template-override }}
        briefcase build iOS xcode
        briefcase package iOS xcode --adhoc-sign

    - name: Build Web App
      if: >
        contains(fromJSON('["", "web"]'), inputs.target-platform)
        && contains(fromJSON('["", "static"]'), inputs.target-format)
        && startsWith(inputs.framework, 'toga')
      working-directory: ${{ steps.create.outputs.project-path }}
      run: |
        briefcase create web static ${{ steps.output-format.outputs.template-override }}
        briefcase build web static
        briefcase package web static

    - name: Upload Failure Logs
      uses: actions/upload-artifact@v3.1.3
      if: failure()
      with:
        name: build-failure-logs-${{ inputs.runner-os }}-${{ inputs.framework }}-${{ inputs.python-version }}-${{ inputs.target-platform }}-${{ inputs.target-format }}
        path: ${{ steps.create.outputs.project-path }}/logs/*
